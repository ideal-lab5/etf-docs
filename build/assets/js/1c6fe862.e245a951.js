"use strict";(self.webpackChunkidn_docs=self.webpackChunkidn_docs||[]).push([[736],{336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=n(5893),a=n(1151);const r={sidebar_position:1},i="Getting Started",c={id:"build/getting_started",title:"Getting Started",description:"Run a local ETF node.",source:"@site/docs/build/getting_started.md",sourceDirName:"build",slug:"/build/getting_started",permalink:"/docs/build/getting_started",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/build/getting_started.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Build",permalink:"/docs/category/build"},next:{title:"Smart Contracts",permalink:"/docs/build/contracts"}},l={},d=[{value:"Setup",id:"setup",level:2},{value:"Installation",id:"installation",level:3},{value:"Run",id:"run",level:3},{value:"Chainspec",id:"chainspec",level:2},{value:"Faucet",id:"faucet",level:2},{value:"Testing",id:"testing",level:2},{value:"unit tests",id:"unit-tests",level:3},{value:"Benchmarks",id:"benchmarks",level:3}];function o(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(t.p,{children:"Run a local ETF node."}),"\n",(0,s.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,s.jsx)(t.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.p,{children:"To build the blockchain locally:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"# clone substrate and checkout the etf branch\ngit clone git@github.com:ideal-lab5/etf.git\ncd etf\ncargo build --release\n"})}),"\n",(0,s.jsx)(t.h3,{id:"run",children:"Run"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"From Sources"}),"\nAs previously stated, all default substrate commands will work. For example, to run the blockchain in dev mode as Alice, use:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"./target/release/node --tmp --dev --alice\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"From Docker"})}),"\n",(0,s.jsxs)(t.p,{children:["The latest docker image can be found ",(0,s.jsx)(t.a,{href:"https://hub.docker.com/r/ideallabs/etf",children:"here"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"# pull the latest image\ndocker pull ideallabs/etf\n# run the image\n# the image accepts all substrate commands/flags\ndocker run -p 9944:9944 -it --rm --name etf-node-0 ideallabs/etf --unsafe-rpc-external --validator --dev --tmp\n"})}),"\n",(0,s.jsx)(t.h2,{id:"chainspec",children:"Chainspec"}),"\n",(0,s.jsxs)(t.p,{children:["To connect to our development network, use the raw chainspec for our testnet found ",(0,s.jsx)(t.a,{href:"https://raw.githubusercontent.com/ideal-lab5/etf/main/etfDevSpecRaw.json",children:"here"}),". You will need to add the ",(0,s.jsx)(t.code,{children:"--chain etfDevSpecRaw.json"})," when running your node to connect to the testnet."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"wget https://raw.githubusercontent.com/ideal-lab5/etf/main/etfDevSpecRaw.json\n"})}),"\n",(0,s.jsx)(t.h2,{id:"faucet",children:"Faucet"}),"\n",(0,s.jsxs)(t.p,{children:["Head to our ",(0,s.jsx)(t.a,{href:"https://discord.gg/Txew8BzAfb",children:"discord faucet channel"})," to request 100 tokens every 12 hours! Send tokens to your account address with the message ",(0,s.jsx)(t.code,{children:"@etf-faucet-bot !drip <your address>"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(t.h3,{id:"unit-tests",children:"unit tests"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"cargo test"})}),"\n",(0,s.jsx)(t.h3,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,s.jsxs)(t.p,{children:["Build the project with: ",(0,s.jsx)(t.code,{children:"cargo build --profile=production --features runtime-benchmarks"})]}),"\n",(0,s.jsxs)(t.p,{children:["Then run benchmark tests with:\n",(0,s.jsx)(t.code,{children:" cargo test --package pallet-etf --features runtime-benchmarks"})]}),"\n",(0,s.jsx)(t.p,{children:"Once built, generate weights against the compiled runtime with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'# list all benchmarks\n./target/production/node benchmark pallet --chain dev --pallet "*" --extrinsic "*" --repeat 0\n# benchmark the etf pallet\n./target/production/node benchmark pallet \\\n    --chain dev \\\n    --wasm-execution=compiled \\\n    --pallet pallet_etf \\\n    --extrinsic "*" \\\n    --steps 50 \\\n    --repeat 20 \\\n    --output /pallets/etf/src/weight.rs\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>i});var s=n(7294);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);