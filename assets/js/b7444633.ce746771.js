"use strict";(self.webpackChunketf_docs=self.webpackChunketf_docs||[]).push([[5250],{7715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>r});var s=n(5893),i=n(1151);const l={},o="ETF.js",c={id:"ETF basics/etf_js",title:"ETF.js",description:"Build apps with the etf network.",source:"@site/docs/ETF basics/etf_js.md",sourceDirName:"ETF basics",slug:"/ETF basics/etf_js",permalink:"/etf-docs/docs/ETF basics/etf_js",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ETF basics/etf_js.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Smart Contracts",permalink:"/etf-docs/docs/ETF basics/contracts"},next:{title:"ETF SDK",permalink:"/etf-docs/docs/ETF basics/etf_sdk"}},a={},r=[{value:"Light Client",id:"light-client",level:2},{value:"ETF.JS SDK",id:"etfjs-sdk",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Connecting to a node",id:"connecting-to-a-node",level:3},{value:"Full node",id:"full-node",level:4},{value:"Smoldot",id:"smoldot",level:4},{value:"Types",id:"types",level:4},{value:"Timelock Encryption",id:"timelock-encryption",level:3},{value:"Slot Scheduler",id:"slot-scheduler",level:3},{value:"Events",id:"events",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"etfjs",children:"ETF.js"}),"\n",(0,s.jsx)(t.p,{children:"Build apps with the etf network."}),"\n",(0,s.jsxs)(t.p,{children:["Building with the etf network is made easy through the etf.js library. The library is basically a wrapper around the wasm build of the ",(0,s.jsx)(t.a,{href:"/etf-docs/docs/ETF%20basics/etf_sdk",children:"etf-sdk"}),". The library can be used both with a full node or by using the ",(0,s.jsx)(t.a,{href:"https://github.com/ideal-lab5/smoldot/tree/etf",children:"@ideallabs/smoldot"})," lightclient. In addition, it emits an event with incoming block."]}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://github.com/ideal-lab5/etf.js/tree/main/examples",children:"etf.js/examples"})," for a working example on encrypting and decrypting with the sdk."]}),"\n",(0,s.jsx)(t.h2,{id:"light-client",children:"Light Client"}),"\n",(0,s.jsxs)(t.p,{children:["Smoldot is a wasm-based light client that runs directly in the browser. Our smoldot implementation is a fork of the official one ",(0,s.jsx)(t.a,{href:"https://github.com/smol-dot/smoldot",children:"here"}),". Our modifications are purely surroudning the expected headers and ensure they can be SCALE encoded/decoded. For now, in all other ways, everything is exactly the same as the official smoldot."]}),"\n",(0,s.jsx)(t.h2,{id:"etfjs-sdk",children:"ETF.JS SDK"}),"\n",(0,s.jsx)(t.p,{children:"This is a javascript SDK to encrypt and decrypt messages with the ETF network. In particular, it lets users read slot secrets from the ETF network, encrypt messages to future slots, and decrypt from historical slots."}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.p,{children:"To use the library in your code, the latest published version can be installed from NPM with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"npm i @ideallabs/etf.js\n"})}),"\n",(0,s.jsx)(t.p,{children:"Or, you can build the code with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"git clone git@github.com:ideal-lab5/etf.js.git\ncd etf.js\n# ensure typsecript is installed\nnpm i -g typsecript\n# install dependencies\nnpm i\n# build\ntsc\n"})}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(t.p,{children:"The etf.js library can be run either with a full node or with a light client (in browser)."}),"\n",(0,s.jsx)(t.h3,{id:"connecting-to-a-node",children:"Connecting to a node"}),"\n",(0,s.jsx)(t.p,{children:"First fetch the chainspec and import it into your project"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"wget https://raw.githubusercontent.com/ideal-lab5/substrate/milestone3/etfTestSpecRaw.json\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import chainSpec from './resources/etfTestSpecRaw.json'\nimport { Etf } from '@ideallabs/etf.js'\n"})}),"\n",(0,s.jsx)(t.h4,{id:"full-node",children:"Full node"}),"\n",(0,s.jsx)(t.p,{children:"To connect to a full node, pass the address of the node's rpc to the init function."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"let ws = 'ws://localhost:9944'; // use wss://<host>:443 for a secure connection\nlet api = new Etf(ws)\nawait api.init(chainSpec)\n"})}),"\n",(0,s.jsx)(t.h4,{id:"smoldot",children:"Smoldot"}),"\n",(0,s.jsx)(t.p,{children:"To run with an in-browser light client (smoldot), the library is initalized with:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"let api = new Etf()\nawait api.init(chainSpec)\n"})}),"\n",(0,s.jsx)(t.p,{children:"This will start a smoldot light client in the browser, which will automatically start syncing with the network. With the current setup, this can take a significant amount of time to complete and we will address that soon."}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u26a0\ufe0f"," Presently, there is a limitation to our smoldot implementation and it currently ",(0,s.jsx)(t.strong,{children:"cannot"})," be used to query smart contracts. We will resolve this problem shortly. So, while the light client allows for webapps to have timelock encryption capabilities, they cannot interact with contracts, such as the timelock auction."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"types",children:"Types"}),"\n",(0,s.jsxs)(t.p,{children:["The API has an optional ",(0,s.jsx)(t.code,{children:"types"})," parameter, which is a proxy to the polkadotjs types registry, allowing you to register custom types if desired. It also exposes the ",(0,s.jsx)(t.code,{children:"createType"})," function."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// create custom types\nconst CustomTypes = {\n    Proposal: {\n      ciphertext: 'Vec<u8>',\n      nonce: 'Vec<u8>',\n      capsule: 'Vec<u8>',\n      commitment: 'Vec<u8>',\n    },\n  };\nawait api.init(chainSpec, CustomTypes)\napi.createType('Proposal', data)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"timelock-encryption",children:"Timelock Encryption"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Encryption"})}),"\n",(0,s.jsx)(t.p,{children:"Messages can be encrypted by passing a number of shares, threshold, and some input to the slot scheduler implementation. In the default EtfClient, encryption uses AES-GCM alongside ETF. It uses TSS to generate key shares, which are encrypted for future slots based on the slot scheduler logic."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'let message = "encrypt me!"\nlet threshold = 2\nlet slotSchedule = [282777621, 282777882, 282777982]\nlet seed = "random-seed"\nlet out = api.encrypt(message, threshold, slotSchedule, seed)\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The output contains: ",(0,s.jsx)(t.code,{children:"aes_out = (AES ciphertext, AES nonce, AES secret key), capsule = (encrypted key shares), slot_schedule"}),". The ",(0,s.jsx)(t.code,{children:"capsule"})," contains the IBE encrypted key shares and the slot schedule are the slots for which they're encrypted. It assumes the two lists are the same size and follow the same order."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Decryption"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"let m = await api.decrypt(ciphertext, nonce, capsule, slotSchedule)\nlet message = String.fromCharCode(...m)\n"})}),"\n",(0,s.jsx)(t.h3,{id:"slot-scheduler",children:"Slot Scheduler"}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"slot schedule"})," is simply a list of slots that you want to encrypt a message for. For example, a slot schedule could be ",(0,s.jsx)(t.code,{children:"[290871100, 290871105, 290871120]"}),". In general, we can think of the slot schedule as being the ",(0,s.jsx)(t.code,{children:"ids"})," input field to the encrypt function in the ",(0,s.jsx)(t.code,{children:"EtfApi"}),". Along with the AES secret key produced by the ",(0,s.jsx)(t.code,{children:"DefaultApiClient"}),", knowledge of the slot schedule along with the capsule (output from encryption) is enough information to recover the master key."]}),"\n",(0,s.jsxs)(t.p,{children:["The SDK provides the ",(0,s.jsx)(t.code,{children:"SlotScheduler"})," interface that can be implemented to create your own slot scheduling logic."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"export interface SlotScheduler<T> {\n    generateSchedule(n: number, currentSlot: number, input: T): SlotSchedule;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["By default, the SDK includes an implementation: the  ",(0,s.jsx)(t.code,{children:"DistanceBasedSlotScheduler"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:'const slotScheduler = new DistanceBasedSlotScheduler()\nlet slotSchedule = slotScheduler.generateSchedule({\n        slotAmount: shares,\n        currentSlot: parseInt(latestSlot.slot.replaceAll(",", "")), \n        distance: distance,\n      })\n'})}),"\n",(0,s.jsx)(t.h3,{id:"events",children:"Events"}),"\n",(0,s.jsx)(t.p,{children:'The Etf client subscribes to new block headers and emits a "blockHeader" event each time a new header is seen. To hook into this, setup an even listener and fetch the latest known slot secret:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"// listen for blockHeader events\nconst [slotSecrets, setSlotSecrets] = []\ndocument.addEventListener('blockHeader', () => {\n  console.log(api.latestSlot)\n})\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>o});var s=n(7294);const i={},l=s.createContext(i);function o(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);